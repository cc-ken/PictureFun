project(PictureFun)

set(target ${PROJECT_NAME})

add_subdirectory(ncnn)

set(QT_DONT_USE_QTGUI ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

include_directories(
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/../
    ${CMAKE_CURRENT_LIST_DIR}/ncnn
)

file(GLOB MAIN_SRC_FILES ${CMAKE_CURRENT_LIST_DIR}/*.h ${CMAKE_CURRENT_LIST_DIR}/*.cpp ${CMAKE_CURRENT_LIST_DIR}/*.qrc)
file(GLOB RESOURCE_FILES ${CMAKE_CURRENT_LIST_DIR}/lang/*.xml)

if (APPLE)
    file(GLOB DNN_MODEL_FILES ${CMAKE_CURRENT_LIST_DIR}/models/*.bin ${CMAKE_CURRENT_LIST_DIR}/models/*.param)
    list(APPEND NCNN_LIBS "-F ${ncnn_FRAMEWORK_DIRS_RELEASE}")
    foreach(framework IN LISTS ncnn_FRAMEWORKS_RELEASE)
        list(APPEND NCNN_FRAMEWORKS "${ncnn_FRAMEWORK_DIRS_RELEASE}/${framework}.framework")
        list(APPEND NCNN_LIBS "-framework ${framework}")
    endforeach(framework IN LISTS ncnn_FRAMEWORKS_RELEASE)
    list(APPEND NCNN_LIBS "-F $ENV{VULKAN_SDK}/Frameworks/" "-framework vulkan")

    list(APPEND NCNN_FRAMEWORKS
        "$ENV{VULKAN_SDK}/Frameworks/vulkan.framework"
        "$ENV{VULKAN_SDK}/lib/libMoltenVK.dylib"
        )
    list(APPEND VULKAN_ICD_FILENAMES "${CMAKE_CURRENT_LIST_DIR}/res/MoltenVK_icd.json")
    set(MACOSX_BUNDLE_ICON_FILE PictureFun.icns)
    list(APPEND APPLICATION_ICNS "${CMAKE_CURRENT_LIST_DIR}/res/PictureFun.icns")
    set_source_files_properties(${NCNN_FRAMEWORKS} PROPERTIES MACOSX_PACKAGE_LOCATION Frameworks)
    set_source_files_properties(${VULKAN_ICD_FILENAMES} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/vulkan/icd.d")
    set_source_files_properties(${APPLICATION_ICNS} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources")
    set_source_files_properties(${DNN_MODEL_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION "Resources/models/")
endif()

if (MSVC)
    set(EXECUTABLE_TYPE "WIN32")
    include(../cmake/generate_product_version.cmake)
    generate_product_version(
        RESOURCE_FILES
        NAME "PictureFun"
        ICON ${CMAKE_CURRENT_LIST_DIR}/res/PictureFun.ico
        VERSION_MAJOR 1
        VERSION_MINOR 0
        VERSION_REVISION 1000
        COMPANY_NAME "AI-Double Co.Ltd"
        COMPANY_COPYRIGHT "AI-Double (C) 2022-2023"
        FILE_DESCRIPTION "Picture Fun editor powered by AI"
    )
endif()

add_executable(${target} ${EXECUTABLE_TYPE}
    ${MAIN_SRC_FILES} 
    ${RESOURCE_FILES} 
    ${DNN_MODEL_FILES} 
    ${NCNN_FRAMEWORKS} 
    ${APPLICATION_ICNS}
    ${VULKAN_ICD_FILENAMES}
)

#Hack for conan library missed qicon
if(NOT TARGET Qt6::QIconPlugin)
    add_library(Qt6::QIconPlugin INTERFACE IMPORTED)
    if (WINDOWS)
        set_property(TARGET Qt6::QIconPlugin PROPERTY INTERFACE_LINK_LIBRARIES 
            $<$<CONFIG:Debug>:qicod>
            $<$<CONFIG:Release>:qico>
            $<$<CONFIG:RelWithDebInfo>:qicod>
            $<$<CONFIG:MinSizeRel>:qico>
        )
        set_property(TARGET Qt6::QIconPlugin PROPERTY INTERFACE_LINK_DIRECTORIES
            $<$<CONFIG:Debug>:${Qt6_QWbmpPlugin_LIB_DIRS_DEBUG}>
            $<$<CONFIG:Release>:${Qt6_QWbmpPlugin_LIB_DIRS_RELEASE}>
            $<$<CONFIG:RelWithDebInfo>:${Qt6_QWbmpPlugin_LIB_DIRS_DEBUG}>
            $<$<CONFIG:MinSizeRel>:${Qt6_QWbmpPlugin_LIB_DIRS_RELEASE}>)
    else()
        set_property(TARGET Qt6::QIconPlugin PROPERTY INTERFACE_LINK_LIBRARIES qico Qt6BundledPcre2 Qt6BundledHarfbuzz Qt6BundledFreetype Qt6BundledLibpng)
        set_property(TARGET Qt6::QIconPlugin PROPERTY INTERFACE_LINK_DIRECTORIES ${Qt6_LIB_DIRS_RELEASE})
    endif()
endif()

target_link_libraries(${target} PRIVATE utils Qt6::Gui Qt6::Core Qt6::Widgets Qt6::QIconPlugin ncnn_engine)

if (APPLE)
    set_target_properties(${target} PROPERTIES
        MACOSX_BUNDLE TRUE
        MACOSX_BUNDLE_INFO_PLIST ${CMAKE_CURRENT_SOURCE_DIR}/Info.plist
        XCODE_ATTRIBUTE_OTHER_CODE_SIGN_FLAGS "--deep"
        XCODE_ATTRIBUTE_LD_RUNPATH_SEARCH_PATHS "@executable_path/../Frameworks"
        MACOSX_PACKAGE_LOCATION Frameworks
        XCODE_FILE_ATTRIBUTES "CodeSignOnCopy"
    )

    foreach(RES_FILE ${RESOURCE_FILES})
        set_property(SOURCE ${RES_FILE} PROPERTY MACOSX_PACKAGE_LOCATION "lang/")
    endforeach(RES_FILE)

    target_link_libraries(${target} PRIVATE
        "-framework AppKit"
        "-framework Carbon" 
        "-framework CoreServices"
        "-framework CoreVideo" 
        "-framework IOKit" 
        "-framework IOSurface"
        "-framework Metal"
        "-framework QuartzCore"
        "-framework OpenGL"
        Qt6::QCocoaIntegrationPlugin
        ${NCNN_LIBS}
    )
endif()

if(MSVC)
    target_link_libraries(${target} PRIVATE Qt6::QWindowsIntegrationPlugin Dwrite)
    target_link_options(${target} PUBLIC /DEBUG)

    add_custom_command(
        TARGET ${PROJECT_NAME} 
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_SOURCE_DIR}/lang
            $<TARGET_FILE_DIR:${PROJECT_NAME}>/lang
    )

    add_custom_command(
        TARGET ${PROJECT_NAME} 
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
            ${CMAKE_CURRENT_SOURCE_DIR}/models
            $<TARGET_FILE_DIR:${PROJECT_NAME}>/Resources/models
    )
    add_custom_command(
        TARGET ${PROJECT_NAME} 
        POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy
            ${ncnn_LIB_DIRS_RELEASE}/../bin/ncnn.dll
            $<TARGET_FILE_DIR:${PROJECT_NAME}>/ncnn.dll
    )

endif()
